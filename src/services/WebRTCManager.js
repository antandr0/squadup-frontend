import SimpleWebRTC from './SimpleWebRTC';

class WebRTCManager {
  constructor() {
    this.simpleWebRTC = new SimpleWebRTC();
    this.isUsingExternalService = false;
    this.connectionTimeout = null;
  }

  async connectToSignalingServer(roomId, userId, nickname, callbacks) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç 15 —Å–µ–∫—É–Ω–¥
    return new Promise(async (resolve, reject) => {
      this.connectionTimeout = setTimeout(() => {
        reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ–∂–∞–µ—Ç –±–æ–ª–µ–µ 15 —Å–µ–∫—É–Ω–¥'));
      }, 15000);

      try {
        await this.tryConnect(roomId, userId, nickname, callbacks);
        clearTimeout(this.connectionTimeout);
        resolve();
      } catch (error) {
        clearTimeout(this.connectionTimeout);
        reject(error);
      }
    });
  }

  async tryConnect(roomId, userId, nickname, callbacks) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞—à –±—ç–∫–µ–Ω–¥
    try {
      const wsUrl = 'wss://squadup-backend-03vr.onrender.com/ws';
      console.log('üîó –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –±—ç–∫–µ–Ω–¥—É...');
      
      await this.simpleWebRTC.connect(wsUrl, roomId, userId, nickname);
      
      this.simpleWebRTC.onRoomJoined = callbacks.onRoomJoined;
      this.simpleWebRTC.onUserJoined = callbacks.onUserJoined;
      this.simpleWebRTC.onUserLeft = callbacks.onUserLeft;
      this.simpleWebRTC.onWebRTCSignal = callbacks.onWebRTCSignal;
      this.simpleWebRTC.onError = callbacks.onError;

      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–∞—à–µ–º—É –±—ç–∫–µ–Ω–¥—É');
      return;

    } catch (error) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –±—ç–∫–µ–Ω–¥—É:', error.message);
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º –≤–Ω–µ—à–Ω–∏–π WebSocket —Å–µ—Ä–≤–∏—Å...');
    }

    // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–µ–º–æ
    try {
      await this.connectToExternalService(roomId, userId, nickname, callbacks);
      this.isUsingExternalService = true;
    } catch (externalError) {
      console.error('‚ùå –í—Å–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∏—Å—å');
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: ${externalError.message}`);
    }
  }

  async connectToExternalService(roomId, userId, nickname, callbacks) {
    return new Promise((resolve, reject) => {
      const externalWsUrl = 'wss://ws.postman-echo.com/raw';
      console.log('üîó –ü—Ä–æ–±—É–µ–º –≤–Ω–µ—à–Ω–∏–π WebSocket —Å–µ—Ä–≤–∏—Å...');
      
      const ws = new WebSocket(externalWsUrl);
      const timeout = setTimeout(() => {
        reject(new Error('–í–Ω–µ—à–Ω–∏–π WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ–∂–∞–µ—Ç'));
      }, 10000);

      ws.onopen = () => {
        clearTimeout(timeout);
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –≤–Ω–µ—à–Ω–µ–º—É WebSocket —Å–µ—Ä–≤–µ—Ä—É');
        
        // –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        setTimeout(() => {
          if (callbacks.onRoomJoined) {
            callbacks.onRoomJoined([
              { userId, nickname, isYou: true },
              { userId: 'demo-1', nickname: 'Player2' },
              { userId: 'demo-2', nickname: 'Player3' }
            ]);
          }
        }, 500);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ - –æ–Ω–æ –Ω–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –¥–ª—è –¥–µ–º–æ
        setTimeout(() => ws.close(), 1000);
        resolve();
      };

      ws.onerror = (error) => {
        clearTimeout(timeout);
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ WebSocket:', error);
        reject(new Error('–í–Ω–µ—à–Ω–∏–π WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'));
      };

      ws.onclose = () => {
        clearTimeout(timeout);
      };
    });
  }

  // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  getLocalAudioStream() {
    return this.simpleWebRTC.getLocalAudioStream();
  }

  leaveRoom() {
    if (this.connectionTimeout) {
      clearTimeout(this.connectionTimeout);
    }
    this.simpleWebRTC.leaveRoom();
  }

  toggleMute(muted) {
    this.simpleWebRTC.toggleMute(muted);
  }

  sendWebRTCSignal(signal) {
    this.simpleWebRTC.sendWebRTCSignal(signal);
  }

  cleanup() {
    if (this.connectionTimeout) {
      clearTimeout(this.connectionTimeout);
    }
    this.simpleWebRTC.cleanup();
  }

  isExternalService() {
    return this.isUsingExternalService;
  }
}

export default WebRTCManager;
