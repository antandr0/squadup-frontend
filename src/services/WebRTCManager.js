class WebRTCManager {
  constructor() {
    this.localStream = null;
    this.peerConnections = new Map(); // connectionId -> RTCPeerConnection
    this.remoteStreams = new Map(); // userId -> MediaStream
    this.ws = null;
    this.connectionId = null;
    this.roomId = null;
    this.userId = null;
    
    // STUN —Å–µ—Ä–≤–µ—Ä—ã (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ)
    this.rtcConfig = {
      iceServers: [
        { urls: 'stun:stun.l.google.com:19302' },
        { urls: 'stun:stun1.l.google.com:19302' },
        { urls: 'stun:stun2.l.google.com:19302' }
      ]
    };
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Signaling Server
  connectToSignalingServer(roomId, userId, nickname, onMessage) {
    return new Promise((resolve, reject) => {
      try {
        // WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ signaling server
        this.ws = new WebSocket('ws://localhost:8080');
        this.roomId = roomId;
        this.userId = userId;

        this.ws.onopen = () => {
          console.log('‚úÖ Connected to signaling server');
          resolve();
        };

        this.ws.onmessage = (event) => {
          try {
            const message = JSON.parse(event.data);
            this.handleSignalingMessage(message, onMessage);
          } catch (error) {
            console.error('Error parsing signaling message:', error);
          }
        };

        this.ws.onerror = (error) => {
          console.error('WebSocket error:', error);
          reject(error);
        };

        this.ws.onclose = () => {
          console.log('‚ùå Disconnected from signaling server');
          this.cleanup();
        };

      } catch (error) {
        reject(error);
      }
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç signaling server
  handleSignalingMessage(message, onMessage) {
    console.log('üì® Signaling message:', message.type);

    switch (message.type) {
      case 'welcome':
        this.connectionId = message.connectionId;
        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è connectionId
        this.joinRoom(this.userId, this.roomId, onMessage.userNickname);
        break;

      case 'room-joined':
        onMessage.onRoomJoined?.(message.users);
        // –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        this.createPeerConnections(message.users);
        break;

      case 'user-joined':
        onMessage.onUserJoined?.(message.user);
        // –°–æ–∑–¥–∞–µ–º peer connection –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.createPeerConnectionForUser(message.user);
        break;

      case 'user-left':
        onMessage.onUserLeft?.(message.userId);
        this.closePeerConnection(message.userId);
        break;

      case 'webrtc-offer':
        this.handleOffer(message.offer, message.fromConnectionId);
        break;

      case 'webrtc-answer':
        this.handleAnswer(message.answer, message.fromConnectionId);
        break;

      case 'ice-candidate':
        this.handleICECandidate(message.candidate, message.fromConnectionId);
        break;

      case 'user-mute-updated':
        onMessage.onUserMuteUpdated?.(message.userId, message.isMuted);
        break;

      case 'error':
        onMessage.onError?.(message.message);
        break;

      default:
        console.warn('Unknown signaling message type:', message.type);
    }
  }

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
  joinRoom(userId, roomId, nickname) {
    this.sendToSignaling({
      type: 'join-room',
      roomId: roomId,
      data: {
        userId: userId,
        nickname: nickname
      }
    });
  }

  // –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
  leaveRoom() {
    if (this.roomId) {
      this.sendToSignaling({
        type: 'leave-room',
        roomId: this.roomId
      });
    }
    this.cleanup();
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ peer connections –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ
  async createPeerConnections(users) {
    for (const user of users) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–±—è
      if (user.userId === this.userId) continue;
      
      await this.createPeerConnectionForUser(user);
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ peer connection –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async createPeerConnectionForUser(user) {
    if (this.peerConnections.has(user.userId)) {
      console.log(`Peer connection already exists for user: ${user.userId}`);
      return;
    }

    try {
      const peerConnection = new RTCPeerConnection(this.rtcConfig);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (this.localStream) {
        this.localStream.getTracks().forEach(track => {
          peerConnection.addTrack(track, this.localStream);
        });
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE candidates
      peerConnection.onicecandidate = (event) => {
        if (event.candidate) {
          this.sendToSignaling({
            type: 'ice-candidate',
            roomId: this.roomId,
            data: {
              targetConnectionId: user.connectionId,
              candidate: event.candidate
            }
          });
        }
      };

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
      peerConnection.ontrack = (event) => {
        console.log('üìû Received remote stream from:', user.userId);
        const remoteStream = event.streams[0];
        this.remoteStreams.set(user.userId, remoteStream);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ –Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        if (this.onRemoteStream) {
          this.onRemoteStream(user.userId, remoteStream);
        }
      };

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      peerConnection.onconnectionstatechange = () => {
        console.log(`Connection state for ${user.userId}:`, peerConnection.connectionState);
        
        if (peerConnection.connectionState === 'connected') {
          console.log(`‚úÖ WebRTC connected with ${user.userId}`);
        } else if (peerConnection.connectionState === 'failed' || 
                   peerConnection.connectionState === 'disconnected') {
          console.log(`‚ùå WebRTC disconnected from ${user.userId}`);
        }
      };

      this.peerConnections.set(user.userId, peerConnection);

      // –°–æ–∑–¥–∞–µ–º offer –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      await this.createOffer(peerConnection, user.connectionId);

    } catch (error) {
      console.error('Error creating peer connection:', error);
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ offer
  async createOffer(peerConnection, targetConnectionId) {
    try {
      const offer = await peerConnection.createOffer();
      await peerConnection.setLocalDescription(offer);

      this.sendToSignaling({
        type: 'webrtc-offer',
        roomId: this.roomId,
        data: {
          targetConnectionId: targetConnectionId,
          sdp: offer
        }
      });
    } catch (error) {
      console.error('Error creating offer:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ offer
  async handleOffer(offer, fromConnectionId) {
    try {
      const peerConnection = new RTCPeerConnection(this.rtcConfig);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
      if (this.localStream) {
        this.localStream.getTracks().forEach(track => {
          peerConnection.addTrack(track, this.localStream);
        });
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE candidates
      peerConnection.onicecandidate = (event) => {
        if (event.candidate) {
          this.sendToSignaling({
            type: 'ice-candidate',
            roomId: this.roomId,
            data: {
              targetConnectionId: fromConnectionId,
              candidate: event.candidate
            }
          });
        }
      };

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
      peerConnection.ontrack = (event) => {
        const remoteStream = event.streams[0];
        // –ù–∞—Ö–æ–¥–∏–º userId –ø–æ connectionId (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–µ–Ω mapping)
        const userId = this.findUserIdByConnectionId(fromConnectionId);
        if (userId) {
          this.remoteStreams.set(userId, remoteStream);
          if (this.onRemoteStream) {
            this.onRemoteStream(userId, remoteStream);
          }
        }
      };

      await peerConnection.setRemoteDescription(offer);
      const answer = await peerConnection.createAnswer();
      await peerConnection.setLocalDescription(answer);

      this.sendToSignaling({
        type: 'webrtc-answer',
        roomId: this.roomId,
        data: {
          targetConnectionId: fromConnectionId,
          sdp: answer
        }
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º peer connection
      const userId = this.findUserIdByConnectionId(fromConnectionId);
      if (userId) {
        this.peerConnections.set(userId, peerConnection);
      }

    } catch (error) {
      console.error('Error handling offer:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ answer
  async handleAnswer(answer, fromConnectionId) {
    try {
      const userId = this.findUserIdByConnectionId(fromConnectionId);
      const peerConnection = this.peerConnections.get(userId);
      
      if (peerConnection) {
        await peerConnection.setRemoteDescription(answer);
      }
    } catch (error) {
      console.error('Error handling answer:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE candidate
  async handleICECandidate(candidate, fromConnectionId) {
    try {
      const userId = this.findUserIdByConnectionId(fromConnectionId);
      const peerConnection = this.peerConnections.get(userId);
      
      if (peerConnection) {
        await peerConnection.addIceCandidate(candidate);
      }
    } catch (error) {
      console.error('Error handling ICE candidate:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞
  async getLocalAudioStream() {
    try {
      this.localStream = await navigator.mediaDevices.getUserMedia({
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true
        },
        video: false
      });
      return this.localStream;
    } catch (error) {
      console.error('Error accessing microphone:', error);
      throw error;
    }
  }

  // Mute/unmute –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  toggleMute(isMuted) {
    if (this.localStream) {
      const audioTracks = this.localStream.getAudioTracks();
      audioTracks.forEach(track => {
        track.enabled = !isMuted;
      });

      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ mute
      this.sendToSignaling({
        type: 'mute-audio',
        roomId: this.roomId,
        data: { isMuted }
      });
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ signaling server
  sendToSignaling(message) {
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
      this.ws.send(JSON.stringify(message));
    } else {
      console.warn('WebSocket not connected');
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  findUserIdByConnectionId(connectionId) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å mapping connectionId -> userId
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º connectionId –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    return connectionId;
  }

  closePeerConnection(userId) {
    const peerConnection = this.peerConnections.get(userId);
    if (peerConnection) {
      peerConnection.close();
      this.peerConnections.delete(userId);
    }
    this.remoteStreams.delete(userId);
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  cleanup() {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ peer connections
    this.peerConnections.forEach((pc, userId) => {
      pc.close();
    });
    this.peerConnections.clear();
    this.remoteStreams.clear();

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
    if (this.localStream) {
      this.localStream.getTracks().forEach(track => track.stop());
      this.localStream = null;
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }

    this.connectionId = null;
    this.roomId = null;
  }
}

export default WebRTCManager;
