// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
class WebRTCDebugger {
  static async testWebSocketConnection() {
    const testUrls = [
      'wss://squadup-backend-03vr.onrender.com/ws',
      'wss://squadup-backend-03vr.onrender.com',
      'ws://squadup-backend-03vr.onrender.com/ws'
    ];

    const results = [];

    for (const url of testUrls) {
      try {
        const result = await this.testUrl(url);
        results.push({ url, ...result });
      } catch (error) {
        results.push({ url, success: false, error: error.message });
      }
    }

    return results;
  }

  static testUrl(url) {
    return new Promise((resolve) => {
      const timeout = setTimeout(() => {
        resolve({ success: false, error: '–¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥' });
      }, 5000);

      const ws = new WebSocket(url);

      ws.onopen = () => {
        clearTimeout(timeout);
        ws.close();
        resolve({ success: true, message: 'WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
      };

      ws.onerror = (error) => {
        clearTimeout(timeout);
        resolve({ success: false, error: 'WebSocket –æ—à–∏–±–∫–∞' });
      };

      ws.onclose = (event) => {
        clearTimeout(timeout);
        if (event.code !== 1000) {
          resolve({ success: false, error: `–ó–∞–∫—Ä—ã—Ç–æ —Å –∫–æ–¥–æ–º ${event.code}` });
        }
      };
    });
  }

  static async diagnoseConnection() {
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π API
    try {
      const healthResponse = await fetch('https://squadup-backend-03vr.onrender.com/health');
      const healthData = await healthResponse.json();
      console.log('‚úÖ Health check:', healthData);
    } catch (error) {
      console.log('‚ùå Health check failed:', error);
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket URLs
    const wsResults = await this.testWebSocketConnection();
    console.log('üîå WebSocket —Ç–µ—Å—Ç—ã:', wsResults);

    return {
      health: 'ok',
      websocketTests: wsResults,
      recommendation: this.getRecommendation(wsResults)
    };
  }

  static getRecommendation(results) {
    const workingUrl = results.find(r => r.success);
    if (workingUrl) {
      return `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL: ${workingUrl.url}`;
    }

    if (results.some(r => r.error.includes('404'))) {
      return 'WebSocket endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –±—ç–∫–µ–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ Render.';
    }

    if (results.some(r => r.error.includes('–¢–∞–π–º–∞—É—Ç'))) {
      return '–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. Render –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å WebSocket –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ.';
    }

    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å Render –¥–ª—è –ª–æ–≥–æ–≤.';
  }
}

export default WebRTCDebugger;
