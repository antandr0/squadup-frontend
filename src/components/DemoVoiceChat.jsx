import React, { useState } from 'react';
import './VoiceChat.css';

const DemoVoiceChat = () => {
  const [isConnected, setIsConnected] = useState(false);
  const [isMuted, setIsMuted] = useState(false);
  const [participants, setParticipants] = useState([]);

  const initializeDemoVoiceChat = () => {
    setIsConnected(true);
    
    // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    setParticipants([
      { userId: 1, nickname: '–í—ã', isYou: true, volume: 100, isMuted: false },
      { userId: 2, nickname: 'Player2', isYou: false, volume: 80, isMuted: false },
      { userId: 3, nickname: 'Player3', isYou: false, volume: 90, isMuted: true }
    ]);
  };

  const disconnectDemoVoiceChat = () => {
    setIsConnected(false);
    setParticipants([]);
  };

  const toggleMute = () => {
    setIsMuted(!isMuted);
  };

  const handleVolumeChange = (userId, volume) => {
    setParticipants(prev => 
      prev.map(p => 
        p.userId === userId ? { ...p, volume } : p
      )
    );
  };

  return (
    <div className="voice-chat">
      <div className="voice-chat-header">
        <h3 className="voice-chat-title">üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç (–î–µ–º–æ)</h3>
        <div className="voice-chat-status">
          <div className={`status-indicator ${isConnected ? 'connected' : 'disconnected'}`}>
            {isConnected ? '–î–µ–º–æ-—Ä–µ–∂–∏–º' : '–û—Ç–∫–ª—é—á–µ–Ω'}
          </div>
        </div>
      </div>

      {!isConnected ? (
        <div className="voice-chat-setup">
          <div className="setup-info">
            <h4>–î–µ–º–æ-—Ä–µ–∂–∏–º –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞</h4>
            <p>–°–µ—Ä–≤–µ—Ä –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–∫–ª—é—á–µ–Ω –¥–µ–º–æ-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.</p>
            <div className="demo-warning">
              ‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
            </div>
          </div>
          <button 
            className="connect-button"
            onClick={initializeDemoVoiceChat}
          >
            üé≠ –í–∫–ª—é—á–∏—Ç—å –¥–µ–º–æ-—Ä–µ–∂–∏–º
          </button>
        </div>
      ) : (
        <div className="voice-chat-active">
          <div className="room-info">
            <div className="room-id">
              <span>ID –∫–æ–º–Ω–∞—Ç—ã: <strong>demo-room-123</strong></span>
              <button className="copy-button">
                üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
              </button>
            </div>
            <button className="invite-button">
              ‚ûï –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏–≥—Ä–æ–∫–∞
            </button>
          </div>

          <div className="participants-list">
            <h4>–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({participants.length}) - –î–µ–º–æ</h4>
            {participants.map(participant => (
              <div key={participant.userId} className="participant-item">
                <div className="participant-info">
                  <div className="participant-avatar">
                    {participant.nickname?.charAt(0).toUpperCase()}
                  </div>
                  <div className="participant-details">
                    <span className="participant-name">
                      {participant.nickname}
                      {participant.isYou && ' (–í—ã)'}
                    </span>
                    <div className="participant-status">
                      {participant.isMuted ? 'üîá –ó–∞–≥–ª—É—à–µ–Ω' : 'üé§ –ì–æ–≤–æ—Ä–∏—Ç'}
                      {participant.isYou && isMuted && ' (–í—ã –∑–∞–≥–ª—É—à–µ–Ω—ã)'}
                    </div>
                  </div>
                </div>
                
                {!participant.isYou && (
                  <div className="participant-controls">
                    <div className="volume-control">
                      <span className="volume-icon">üîä</span>
                      <input
                        type="range"
                        min="0"
                        max="100"
                        value={participant.volume}
                        onChange={(e) => handleVolumeChange(participant.userId, parseInt(e.target.value))}
                        className="volume-slider"
                      />
                      <span className="volume-value">{participant.volume}%</span>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>

          <div className="voice-controls">
            <button 
              className={`mute-button ${isMuted ? 'muted' : ''}`}
              onClick={toggleMute}
            >
              {isMuted ? 'üîá –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : 'üé§ –í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫'}
            </button>
            <button 
              className="disconnect-button"
              onClick={disconnectDemoVoiceChat}
            >
              üìû –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è
            </button>
          </div>
        </div>
      )}

      <div className="voice-features-info">
        <h4>–í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ:</h4>
        <ul>
          <li>‚ö° –ù–∞—Å—Ç–æ—è—â–∞—è –≥–æ–ª–æ—Å–æ–≤–∞—è —Å–≤—è–∑—å —Å —Ç–∏–º–º–µ–π—Ç–∞–º–∏</li>
          <li>üîí –ó–∞—â–∏—â–µ–Ω–Ω–æ–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</li>
          <li>üéØ –ö—Ä–∏—Å—Ç–∞–ª—å–Ω–æ —á–∏—Å—Ç–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞</li>
          <li>üë• –î–æ 8 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ</li>
        </ul>
      </div>
    </div>
  );
};

export default DemoVoiceChat;
