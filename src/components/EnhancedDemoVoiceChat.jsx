import React, { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import WebRTCDebugger from '../services/WebRTCDebugger';
import './VoiceChat.css';

const EnhancedDemoVoiceChat = () => {
  const { user } = useAuth();
  const [isConnected, setIsConnected] = useState(false);
  const [isMuted, setIsMuted] = useState(false);
  const [participants, setParticipants] = useState([]);
  const [backendStatus, setBackendStatus] = useState('checking');
  const [diagnosis, setDiagnosis] = useState(null);

  useEffect(() => {
    checkBackendStatus();
  }, []);

  const checkBackendStatus = async () => {
    setBackendStatus('checking');
    try {
      const diagnosisResult = await WebRTCDebugger.diagnoseConnection();
      setDiagnosis(diagnosisResult);
      
      const hasWebSocket = diagnosisResult.websocketTests.some(test => test.success);
      setBackendStatus(hasWebSocket ? 'ready' : 'waiting');
    } catch (error) {
      setBackendStatus('error');
    }
  };

  const initializeDemoVoiceChat = () => {
    setIsConnected(true);
    
    // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    setParticipants([
      { userId: user.id, nickname: user.nickname, isYou: true, volume: 100, isMuted: false },
      { userId: 2, nickname: 'Player2', isYou: false, volume: 80, isMuted: false },
      { userId: 3, nickname: 'Player3', isYou: false, volume: 90, isMuted: true },
      { userId: 4, nickname: 'Player4', isYou: false, volume: 70, isMuted: false }
    ]);
  };

  const disconnectDemoVoiceChat = () => {
    setIsConnected(false);
    setParticipants([]);
  };

  const toggleMute = () => {
    setIsMuted(!isMuted);
  };

  const getStatusMessage = () => {
    switch (backendStatus) {
      case 'checking':
        return 'üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±—ç–∫–µ–Ω–¥–∞...';
      case 'ready':
        return '‚úÖ –ë—ç–∫–µ–Ω–¥ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!';
      case 'waiting':
        return '‚è≥ –û–∂–∏–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—ç–∫–µ–Ω–¥–∞...';
      case 'error':
        return '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—ç–∫–µ–Ω–¥–∞';
      default:
        return '‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...';
    }
  };

  return (
    <div className="voice-chat">
      <div className="voice-chat-header">
        <h3 className="voice-chat-title">üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç</h3>
        <div className="voice-chat-status">
          <div className={`status-indicator ${isConnected ? 'connected' : 'disconnected'}`}>
            {isConnected ? '–î–µ–º–æ-—Ä–µ–∂–∏–º' : '–û—Ç–∫–ª—é—á–µ–Ω'}
          </div>
        </div>
      </div>

      {/* –°—Ç–∞—Ç—É—Å –±—ç–∫–µ–Ω–¥–∞ */}
      <div className="backend-status">
        <div className={`status-message ${backendStatus}`}>
          {getStatusMessage()}
        </div>
        {diagnosis && (
          <div className="status-details">
            <p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong> {diagnosis.recommendation}</p>
            {backendStatus === 'waiting' && (
              <div className="deployment-info">
                <p>üîÑ –ë—ç–∫–µ–Ω–¥ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –Ω–∞ Render...</p>
                <p>–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 5-10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞</p>
                <button onClick={checkBackendStatus} className="refresh-button">
                  üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞
                </button>
              </div>
            )}
          </div>
        )}
      </div>

      {!isConnected ? (
        <div className="voice-chat-setup">
          <div className="setup-info">
            <h4>–î–µ–º–æ-—Ä–µ–∂–∏–º –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞</h4>
            <p>–†–µ–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—ç–∫–µ–Ω–¥–∞.</p>
            <p>–ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ:</p>
            
            <div className="demo-features">
              <div className="feature-item">‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º</div>
              <div className="feature-item">‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</div>
              <div className="feature-item">‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–Ω–∞—Ç—ã</div>
              <div className="feature-item">üîÑ –†–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è WebSocket</div>
            </div>
          </div>
          <button 
            className="connect-button demo"
            onClick={initializeDemoVoiceChat}
          >
            üé≠ –í–∫–ª—é—á–∏—Ç—å –¥–µ–º–æ-—Ä–µ–∂–∏–º
          </button>
        </div>
      ) : (
        <div className="voice-chat-active">
          <div className="demo-notice">
            <div className="demo-icon">üé≠</div>
            <div className="demo-content">
              <h4>–î–µ–º–æ-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω</h4>
              <p>–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –†–µ–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—ç–∫–µ–Ω–¥–∞.</p>
            </div>
          </div>

          <div className="room-info">
            <div className="room-id">
              <span>ID –∫–æ–º–Ω–∞—Ç—ã: <strong>demo-room-123</strong></span>
              <button className="copy-button">
                üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
              </button>
            </div>
            <div className="room-stats">
              üë• {participants.length}/6 –∏–≥—Ä–æ–∫–æ–≤ (–¥–µ–º–æ)
            </div>
          </div>

          <div className="participants-list">
            <h4>–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({participants.length}) - –î–µ–º–æ</h4>
            {participants.map(participant => (
              <div key={participant.userId} className="participant-item">
                <div className="participant-info">
                  <div className="participant-avatar">
                    {participant.nickname?.charAt(0).toUpperCase()}
                  </div>
                  <div className="participant-details">
                    <span className="participant-name">
                      {participant.nickname}
                      {participant.isYou && ' (–í—ã)'}
                    </span>
                    <div className="participant-status">
                      {participant.isMuted ? 'üîá –ó–∞–≥–ª—É—à–µ–Ω' : 'üé§ –ì–æ–≤–æ—Ä–∏—Ç'}
                      {participant.isYou && isMuted && ' (–í—ã –∑–∞–≥–ª—É—à–µ–Ω—ã)'}
                    </div>
                  </div>
                </div>
                
                {!participant.isYou && (
                  <div className="participant-controls">
                    <div className="volume-control">
                      <span className="volume-icon">üîä</span>
                      <span className="volume-value">{participant.volume}%</span>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>

          <div className="voice-controls">
            <button 
              className={`mute-button ${isMuted ? 'muted' : ''}`}
              onClick={toggleMute}
            >
              {isMuted ? 'üîá –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : 'üé§ –í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫'}
            </button>
            <button 
              className="disconnect-button"
              onClick={disconnectDemoVoiceChat}
            >
              üìû –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è
            </button>
          </div>

          <div className="demo-next-steps">
            <h4>–ß—Ç–æ –±—É–¥–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ:</h4>
            <ul>
              <li>‚ö° –ù–∞—Å—Ç–æ—è—â–∞—è –≥–æ–ª–æ—Å–æ–≤–∞—è —Å–≤—è–∑—å —Å —Ç–∏–º–º–µ–π—Ç–∞–º–∏</li>
              <li>üîí –ó–∞—â–∏—â–µ–Ω–Ω–æ–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</li>
              <li>üéØ –ö—Ä–∏—Å—Ç–∞–ª—å–Ω–æ —á–∏—Å—Ç–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞</li>
              <li>üë• –î–æ 6 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ</li>
            </ul>
          </div>
        </div>
      )}
    </div>
  );
};

export default EnhancedDemoVoiceChat;
