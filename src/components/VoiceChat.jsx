import React, { useState, useRef, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import './VoiceChat.css';

const VoiceChat = () => {
  const { user } = useAuth();
  const [isConnected, setIsConnected] = useState(false);
  const [roomId, setRoomId] = useState('');
  const [participants, setParticipants] = useState([]);
  const [isMuted, setIsMuted] = useState(false);
  const [localStream, setLocalStream] = useState(null);
  const [remoteStreams, setRemoteStreams] = useState(new Map());
  const peerConnections = useRef(new Map());
  const localAudioRef = useRef(null);
  const audioContextRef = useRef(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebRTC
  const initializeVoiceChat = async () => {
    try {
      // –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
      const stream = await navigator.mediaDevices.getUserMedia({ 
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true
        } 
      });
      
      setLocalStream(stream);
      
      if (localAudioRef.current) {
        localAudioRef.current.srcObject = stream;
      }
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
      const newRoomId = generateRoomId();
      setRoomId(newRoomId);
      setIsConnected(true);
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ signaling server (–∑–∞–≥–ª—É—à–∫–∞)
      connectToSignalingServer(newRoomId, user);
      
    } catch (error) {
      console.error('Error accessing microphone:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.');
    }
  };

  const generateRoomId = () => {
    return `room-${Math.random().toString(36).substr(2, 9)}`;
  };

  const connectToSignalingServer = (roomId, user) => {
    // –ó–∞–≥–ª—É—à–∫–∞ - –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
    console.log(`Connecting to room: ${roomId} as ${user.nickname}`);
    
    // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    setTimeout(() => {
      setParticipants([
        { id: user.id, nickname: user.nickname, isYou: true, volume: 100, isMuted: false },
        { id: 2, nickname: 'Player2', isYou: false, volume: 80, isMuted: false },
        { id: 3, nickname: 'Player3', isYou: false, volume: 90, isMuted: true }
      ]);
    }, 1000);
  };

  const disconnectVoiceChat = () => {
    if (localStream) {
      localStream.getTracks().forEach(track => track.stop());
    }
    
    peerConnections.current.forEach(pc => pc.close());
    peerConnections.current.clear();
    setRemoteStreams(new Map());
    
    setIsConnected(false);
    setParticipants([]);
  };

  const toggleMute = () => {
    if (localStream) {
      const audioTracks = localStream.getAudioTracks();
      audioTracks.forEach(track => {
        track.enabled = !track.enabled;
      });
      setIsMuted(!track.enabled);
    }
  };

  const handleVolumeChange = (userId, volume) => {
    setParticipants(prev => 
      prev.map(p => 
        p.id === userId ? { ...p, volume } : p
      )
    );
    
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    console.log(`Changed volume for user ${userId} to ${volume}%`);
  };

  const copyRoomLink = () => {
    navigator.clipboard.writeText(roomId);
    alert('–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–Ω–∞—Ç—É —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
  };

  const invitePlayer = () => {
    const nickname = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:');
    if (nickname) {
      // –ó–∞–≥–ª—É—à–∫–∞ - –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
      console.log(`Inviting player: ${nickname}`);
    }
  };

  return (
    <div className="voice-chat">
      <div className="voice-chat-header">
        <h3 className="voice-chat-title">üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç</h3>
        <div className="voice-chat-status">
          <div className={`status-indicator ${isConnected ? 'connected' : 'disconnected'}`}>
            {isConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}
          </div>
        </div>
      </div>

      {!isConnected ? (
        <div className="voice-chat-setup">
          <div className="setup-info">
            <h4>–°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É</h4>
            <p>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —Ç–∏–º–º–µ–π—Ç–æ–≤ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ç–∞–∫—Ç–∏–∫–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≤ –∏–≥—Ä–µ</p>
          </div>
          <button 
            className="connect-button"
            onClick={initializeVoiceChat}
          >
            üéß –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
          </button>
        </div>
      ) : (
        <div className="voice-chat-active">
          <div className="room-info">
            <div className="room-id">
              <span>ID –∫–æ–º–Ω–∞—Ç—ã: {roomId}</span>
              <button 
                className="copy-button"
                onClick={copyRoomLink}
              >
                üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
              </button>
            </div>
            <button 
              className="invite-button"
              onClick={invitePlayer}
            >
              ‚ûï –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏–≥—Ä–æ–∫–∞
            </button>
          </div>

          <div className="participants-list">
            <h4>–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({participants.length})</h4>
            {participants.map(participant => (
              <div key={participant.id} className="participant-item">
                <div className="participant-info">
                  <div className="participant-avatar">
                    {participant.nickname.charAt(0).toUpperCase()}
                  </div>
                  <div className="participant-details">
                    <span className="participant-name">
                      {participant.nickname}
                      {participant.isYou && ' (–í—ã)'}
                    </span>
                    <div className="participant-status">
                      {participant.isMuted ? 'üîá –ó–∞–≥–ª—É—à–µ–Ω' : 'üé§ –ì–æ–≤–æ—Ä–∏—Ç'}
                    </div>
                  </div>
                </div>
                
                {!participant.isYou && (
                  <div className="participant-controls">
                    <div className="volume-control">
                      <span className="volume-icon">üîä</span>
                      <input
                        type="range"
                        min="0"
                        max="100"
                        value={participant.volume}
                        onChange={(e) => handleVolumeChange(participant.id, parseInt(e.target.value))}
                        className="volume-slider"
                      />
                      <span className="volume-value">{participant.volume}%</span>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>

          <div className="voice-controls">
            <button 
              className={`mute-button ${isMuted ? 'muted' : ''}`}
              onClick={toggleMute}
            >
              {isMuted ? 'üîá –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : 'üé§ –í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫'}
            </button>
            <button 
              className="disconnect-button"
              onClick={disconnectVoiceChat}
            >
              üìû –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è
            </button>
          </div>

          {/* –°–∫—Ä—ã—Ç—ã–π audio —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ */}
          <audio ref={localAudioRef} autoPlay muted />
        </div>
      )}

      {/* –î–µ–º–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö */}
      <div className="voice-features-info">
        <h4>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞:</h4>
        <ul>
          <li>üéØ –ö—Ä–∏—Å—Ç–∞–ª—å–Ω–æ —á–∏—Å—Ç–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞</li>
          <li>üîä –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏</li>
          <li>üë• –î–æ 8 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ</li>
          <li>‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</li>
          <li>üõ°Ô∏è –°–∫–≤–æ–∑–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ</li>
        </ul>
      </div>
    </div>
  );
};

export default VoiceChat;
