import React, { useState, useRef, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import WebRTCManager from '../services/WebRTCManager';
import DemoVoiceChat from './DemoVoiceChat';
import WebRTCDebugger from '../services/WebRTCDebugger';
import './VoiceChat.css';

const VoiceChat = () => {
  const { user } = useAuth();
  const [isConnected, setIsConnected] = useState(false);
  const [roomId, setRoomId] = useState('');
  const [participants, setParticipants] = useState([]);
  const [isMuted, setIsMuted] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState('disconnected');
  const [useDemoMode, setUseDemoMode] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const [debugLog, setDebugLog] = useState([]);
  const [diagnosis, setDiagnosis] = useState(null);
  
  const webRTCManager = useRef(null);

  const addDebugLog = (message) => {
    console.log('üîß Debug:', message);
    setDebugLog(prev => [...prev.slice(-9), `${new Date().toLocaleTimeString()}: ${message}`]);
  };

  useEffect(() => {
    webRTCManager.current = new WebRTCManager();
    addDebugLog('WebRTCManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    return () => {
      if (webRTCManager.current) {
        webRTCManager.current.cleanup();
        addDebugLog('WebRTCManager –æ—á–∏—â–µ–Ω');
      }
    };
  }, []);

  const runDiagnostics = async () => {
    addDebugLog('–ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    const diagnosisResult = await WebRTCDebugger.diagnoseConnection();
    setDiagnosis(diagnosisResult);
    addDebugLog('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  };

  const initializeVoiceChat = async () => {
    try {
      setConnectionStatus('connecting');
      setErrorMessage('');
      addDebugLog('–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É...');
      
      addDebugLog('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...');
      await webRTCManager.current.getLocalAudioStream();
      addDebugLog('‚úÖ –î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –ø–æ–ª—É—á–µ–Ω');
      
      const newRoomId = `room-${user.id}-${Date.now()}`;
      setRoomId(newRoomId);
      addDebugLog(`–°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞: ${newRoomId}`);
      
      addDebugLog('–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É...');
      await webRTCManager.current.connectToSignalingServer(
        newRoomId,
        user.id,
        user.nickname,
        {
          onRoomJoined: (users) => {
            addDebugLog(`‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${users.length}`);
            setParticipants(users.map(u => ({
              ...u,
              isYou: u.userId === user.id,
              volume: 100,
              isMuted: false
            })));
            setIsConnected(true);
            setConnectionStatus('connected');
          },
          
          onUserJoined: (newUser) => {
            addDebugLog(`üë§ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: ${newUser.nickname}`);
            setParticipants(prev => {
              if (prev.find(p => p.userId === newUser.userId)) return prev;
              return [...prev, {
                ...newUser,
                isYou: newUser.userId === user.id,
                volume: 100,
                isMuted: false
              }];
            });
          },
          
          onUserLeft: (userId) => {
            addDebugLog(`üë§ –£—á–∞—Å—Ç–Ω–∏–∫ –≤—ã—à–µ–ª: ${userId}`);
            setParticipants(prev => prev.filter(p => p.userId !== userId));
          },
          
          onError: (errorMsg) => {
            addDebugLog(`‚ùå –û—à–∏–±–∫–∞: ${errorMsg}`);
            setConnectionStatus('error');
            setErrorMessage(errorMsg);
          }
        }
      );

      addDebugLog('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');

    } catch (error) {
      addDebugLog(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
      setConnectionStatus('error');
      setErrorMessage(error.message);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setTimeout(runDiagnostics, 1000);
    }
  };

  const disconnectVoiceChat = () => {
    addDebugLog('–û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞...');
    if (webRTCManager.current) {
      webRTCManager.current.leaveRoom();
    }
    setIsConnected(false);
    setConnectionStatus('disconnected');
    setParticipants([]);
    addDebugLog('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞');
  };

  const toggleMute = () => {
    const newMutedState = !isMuted;
    setIsMuted(newMutedState);
    addDebugLog(newMutedState ? 'üîá –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤—ã–∫–ª—é—á–µ–Ω' : 'üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω');
    
    if (webRTCManager.current) {
      webRTCManager.current.toggleMute(newMutedState);
    }
  };

  const enableDemoMode = () => {
    addDebugLog('üîÑ –í–∫–ª—é—á–∞–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º');
    setUseDemoMode(true);
    setErrorMessage('');
  };

  if (useDemoMode) {
    return <DemoVoiceChat />;
  }

  if (connectionStatus === 'error' && !isConnected) {
    return (
      <div className="voice-chat">
        <div className="voice-chat-header">
          <h3 className="voice-chat-title">üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç</h3>
          <div className="voice-chat-status">
            <div className="status-indicator error">–û—à–∏–±–∫–∞</div>
          </div>
        </div>

        <div className="error-state">
          <div className="error-icon">‚ö†Ô∏è</div>
          <div className="error-content">
            <h4>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è</h4>
            <p>{errorMessage}</p>
            
            {diagnosis && (
              <div className="diagnosis-info">
                <h5>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:</h5>
                <p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong> {diagnosis.recommendation}</p>
                <div className="ws-tests">
                  {diagnosis.websocketTests.map((test, index) => (
                    <div key={index} className={`ws-test ${test.success ? 'success' : 'error'}`}>
                      <strong>{test.url}</strong>: {test.success ? '‚úÖ –£—Å–ø–µ—Ö' : `‚ùå ${test.error}`}
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            <div className="debug-log">
              <h5>–õ–æ–≥ –æ—Ç–ª–∞–¥–∫–∏:</h5>
              {debugLog.map((log, index) => (
                <div key={index} className="debug-line">{log}</div>
              ))}
            </div>
            
            <div className="error-actions">
              <button className="retry-button" onClick={initializeVoiceChat}>
                üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
              <button className="diagnose-button" onClick={runDiagnostics}>
                üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
              </button>
              <button className="demo-button" onClick={enableDemoMode}>
                üé≠ –î–µ–º–æ-—Ä–µ–∂–∏–º
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="voice-chat">
      <div className="voice-chat-header">
        <h3 className="voice-chat-title">üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç</h3>
        <div className="voice-chat-status">
          <div className={`status-indicator ${connectionStatus}`}>
            {connectionStatus === 'connected' ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : 
             connectionStatus === 'connecting' ? '–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è...' : '–û—Ç–∫–ª—é—á–µ–Ω'}
          </div>
        </div>
      </div>

      {!isConnected ? (
        <div className="voice-chat-setup">
          <div className="setup-info">
            <h4>–°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É</h4>
            <p>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —Ç–∏–º–º–µ–π—Ç–æ–≤ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ç–∞–∫—Ç–∏–∫–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≤ –∏–≥—Ä–µ</p>
            <div className="server-info">
              <strong>WebSocket URL:</strong> wss://squadup-backend-03vr.onrender.com/ws
            </div>
            <button className="diagnose-link" onClick={runDiagnostics}>
              üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            </button>
          </div>
          <button 
            className="connect-button"
            onClick={initializeVoiceChat}
            disabled={connectionStatus === 'connecting'}
          >
            {connectionStatus === 'connecting' ? 'üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : 'üéß –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'}
          </button>
          
          <div className="demo-fallback">
            <button className="demo-fallback-button" onClick={enableDemoMode}>
              üé≠ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–¥–µ–º–æ)
            </button>
          </div>
        </div>
      ) : (
        <div className="voice-chat-active">
          <div className="room-info">
            <div className="room-id">
              <span>ID –∫–æ–º–Ω–∞—Ç—ã: <strong>{roomId}</strong></span>
              <button className="copy-button" onClick={() => navigator.clipboard.writeText(roomId)}>
                üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
              </button>
            </div>
            <div className="room-stats">
              üë• {participants.length}/6 –∏–≥—Ä–æ–∫–æ–≤
            </div>
          </div>

          <div className="participants-list">
            <h4>–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({participants.length})</h4>
            {participants.map(participant => (
              <div key={participant.userId} className="participant-item">
                <div className="participant-info">
                  <div className="participant-avatar">
                    {participant.nickname?.charAt(0).toUpperCase()}
                  </div>
                  <div className="participant-details">
                    <span className="participant-name">
                      {participant.nickname}
                      {participant.isYou && ' (–í—ã)'}
                    </span>
                    <div className="participant-status">
                      {participant.isMuted ? 'üîá –ó–∞–≥–ª—É—à–µ–Ω' : 'üé§ –ì–æ–≤–æ—Ä–∏—Ç'}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>

          <div className="voice-controls">
            <button 
              className={`mute-button ${isMuted ? 'muted' : ''}`}
              onClick={toggleMute}
            >
              {isMuted ? 'üîá –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : 'üé§ –í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫'}
            </button>
            <button 
              className="disconnect-button"
              onClick={disconnectVoiceChat}
            >
              üìû –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è
            </button>
          </div>

          <div className="debug-section">
            <details>
              <summary>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</summary>
              <div className="debug-log">
                {debugLog.map((log, index) => (
                  <div key={index} className="debug-line">{log}</div>
                ))}
              </div>
            </details>
          </div>
        </div>
      )}
    </div>
  );
};

export default VoiceChat;
