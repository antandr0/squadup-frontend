import React, { useEffect, useRef, useState } from 'react';

const VoiceChat = ({ roomId, userId, roomName, onClose }) => {
  const localAudioRef = useRef();
  const remoteAudioRef = useRef();
  const [isConnected, setIsConnected] = useState(false);
  const [isMuted, setIsMuted] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState('connecting');
  const [error, setError] = useState('');
  const [audioLevel, setAudioLevel] = useState(0); // –£—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞ 0-100
  const [isSpeaking, setIsSpeaking] = useState(false);

  const pc = useRef(null);
  const localStream = useRef(null);
  const audioContext = useRef(null);
  const analyser = useRef(null);
  const animationFrame = useRef(null);

  useEffect(() => {
    initializeVoiceChat();
    return () => {
      cleanup();
    };
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞
  const analyzeAudio = () => {
    if (!analyser.current || !localStream.current) return;

    const dataArray = new Uint8Array(analyser.current.frequencyBinCount);
    analyser.current.getByteFrequencyData(dataArray);

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞
    let sum = 0;
    for (let i = 0; i < dataArray.length; i++) {
      sum += dataArray[i];
    }
    const average = sum / dataArray.length;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 100
    const level = Math.min(100, Math.max(0, (average / 255) * 100));
    setAudioLevel(level);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≥–æ–≤–æ—Ä–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ—Ä–æ–≥ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
    setIsSpeaking(level > 5);

    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑
    animationFrame.current = requestAnimationFrame(analyzeAudio);
  };

  const initializeVoiceChat = async () => {
    try {
      setConnectionStatus('connecting');
      setError('');

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
      const stream = await navigator.mediaDevices.getUserMedia({ 
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true,
          channelCount: 1,
          sampleRate: 48000
        },
        video: false 
      });

      localStream.current = stream;
      localAudioRef.current.srcObject = stream;

      // –°–æ–∑–¥–∞–µ–º AudioContext –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–≤—É–∫–∞
      audioContext.current = new (window.AudioContext || window.webkitAudioContext)();
      analyser.current = audioContext.current.createAnalyser();
      analyser.current.fftSize = 256;
      
      const source = audioContext.current.createMediaStreamSource(stream);
      source.connect(analyser.current);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∑–≤—É–∫–∞
      analyzeAudio();

      // –°–æ–∑–¥–∞–µ–º Peer Connection
      pc.current = new RTCPeerConnection({
        iceServers: [
          { urls: 'stun:stun.l.google.com:19302' },
          { urls: 'stun:stun1.l.google.com:19302' },
          { urls: 'stun:stun2.l.google.com:19302' },
          { urls: 'stun:stun3.l.google.com:19302' },
          { urls: 'stun:stun4.l.google.com:19302' }
        ]
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏ –≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      stream.getTracks().forEach(track => {
        pc.current.addTrack(track, stream);
      });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ WebRTC —Å–æ–±—ã—Ç–∏–π
      pc.current.onicecandidate = (event) => {
        if (event.candidate) {
          console.log('‚ùÑÔ∏è ICE candidate:', event.candidate);
        }
      };

      pc.current.ontrack = (event) => {
        console.log('üéß –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫');
        remoteAudioRef.current.srcObject = event.streams[0];
        setIsConnected(true);
        setConnectionStatus('connected');
      };

      pc.current.onconnectionstatechange = () => {
        const state = pc.current.connectionState;
        console.log('üîó Connection state:', state);
        setConnectionStatus(state);
        
        if (state === 'connected') {
          setIsConnected(true);
        } else if (state === 'disconnected' || state === 'failed') {
          setIsConnected(false);
        }
      };

      // –°–æ–∑–¥–∞–µ–º offer –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      const offer = await pc.current.createOffer({
        offerToReceiveAudio: true,
        offerToReceiveVideo: false
      });
      
      await pc.current.setLocalDescription(offer);
      
      console.log('‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      setConnectionStatus('ready');

      // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –¥–µ–º–æ)
      setTimeout(() => {
        if (pc.current && pc.current.connectionState === 'new') {
          simulateRemoteConnection();
        }
      }, 2000);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞:', error);
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω: ${error.message}`);
      setConnectionStatus('failed');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–µ–º–æ)
  const simulateRemoteConnection = async () => {
    try {
      const remotePc = new RTCPeerConnection({
        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
      });

      const remoteStream = await navigator.mediaDevices.getUserMedia({ audio: true });
      remoteStream.getTracks().forEach(track => {
        remotePc.addTrack(track, remoteStream);
      });

      const offer = await pc.current.createOffer();
      await pc.current.setLocalDescription(offer);
      
      await remotePc.setRemoteDescription(offer);
      const answer = await remotePc.createAnswer();
      await remotePc.setLocalDescription(answer);
      
      await pc.current.setRemoteDescription(answer);

      console.log('ü§ñ –î–µ–º–æ: —Å–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

    } catch (error) {
      console.log('‚ö†Ô∏è –î–µ–º–æ: —Å–∏–º—É–ª—è—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞');
    }
  };

  const toggleMute = () => {
    if (localStream.current) {
      const audioTracks = localStream.current.getAudioTracks();
      audioTracks.forEach(track => {
        track.enabled = !track.enabled;
      });
      setIsMuted(!isMuted);
    }
  };

  const cleanup = () => {
    if (animationFrame.current) {
      cancelAnimationFrame(animationFrame.current);
    }
    if (audioContext.current) {
      audioContext.current.close();
    }
    if (pc.current) {
      pc.current.close();
    }
    if (localStream.current) {
      localStream.current.getTracks().forEach(track => track.stop());
    }
    setIsConnected(false);
  };

  const disconnect = () => {
    cleanup();
    onClose();
  };

  const getStatusColor = () => {
    switch(connectionStatus) {
      case 'connected': return '#00ff88';
      case 'connecting': return '#ffc107';
      case 'ready': return '#4e54c8';
      case 'failed': return '#ff6b6b';
      default: return '#b0b0d0';
    }
  };

  const getStatusText = () => {
    switch(connectionStatus) {
      case 'connected': return '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
      case 'connecting': return '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
      case 'ready': return '–ì–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é';
      case 'failed': return '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
      default: return connectionStatus;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–≤—É–∫–∞
  const getAudioLevelColor = () => {
    if (audioLevel > 50) return '#ff6b6b'; // –ö—Ä–∞—Å–Ω—ã–π - –≥—Ä–æ–º–∫–æ
    if (audioLevel > 20) return '#ffc107'; // –ñ–µ–ª—Ç—ã–π - —Å—Ä–µ–¥–Ω–µ
    return '#00ff88'; // –ó–µ–ª–µ–Ω—ã–π - —Ç–∏—Ö–æ
  };

  return (
    <div style={{
      position: 'fixed',
      top: '50%',
      left: '50%',
      transform: 'translate(-50%, -50%)',
      background: 'var(--card-bg)',
      border: '2px solid var(--primary-blue)',
      borderRadius: '15px',
      padding: '25px',
      zIndex: 1000,
      minWidth: '350px',
      maxWidth: '90vw',
      boxShadow: '0 20px 40px rgba(0, 0, 0, 0.5)',
      backdropFilter: 'blur(10px)'
    }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: '20px'
      }}>
        <h3 style={{ 
          margin: 0, 
          color: 'var(--text-primary)',
          display: 'flex',
          alignItems: 'center',
          gap: '10px'
        }}>
          üéôÔ∏è {roomName}
        </h3>
        <button
          onClick={onClose}
          style={{
            background: 'rgba(255, 107, 107, 0.2)',
            border: '1px solid rgba(255, 107, 107, 0.3)',
            color: '#ff6b6b',
            fontSize: '18px',
            cursor: 'pointer',
            width: '32px',
            height: '32px',
            borderRadius: '50%',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center'
          }}
        >
          √ó
        </button>
      </div>

      {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
      <div style={{
        display: 'flex',
        alignItems: 'center',
        gap: '10px',
        marginBottom: '15px',
        padding: '12px',
        background: 'rgba(255, 255, 255, 0.05)',
        borderRadius: '10px'
      }}>
        <div style={{
          width: '10px',
          height: '10px',
          borderRadius: '50%',
          background: getStatusColor(),
          animation: connectionStatus === 'connecting' ? 'pulse 1.5s infinite' : 'none'
        }}></div>
        <span style={{ color: 'var(--text-secondary)', fontSize: '14px' }}>
          {getStatusText()}
        </span>
        {isConnected && (
          <span style={{ 
            color: '#00ff88', 
            fontSize: '12px',
            marginLeft: 'auto'
          }}>
            üîä –ó–≤—É–∫ –∞–∫—Ç–∏–≤–µ–Ω
          </span>
        )}
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞ */}
      <div style={{
        marginBottom: '20px',
        padding: '15px',
        background: 'rgba(255, 255, 255, 0.05)',
        borderRadius: '10px'
      }}>
        <div style={{
          display: 'flex',
          alignItems: 'center',
          gap: '10px',
          marginBottom: '8px'
        }}>
          <div style={{
            width: '12px',
            height: '12px',
            borderRadius: '50%',
            background: isSpeaking ? getAudioLevelColor() : '#666',
            animation: isSpeaking ? 'pulse 0.5s infinite' : 'none'
          }}></div>
          <span style={{ color: 'var(--text-secondary)', fontSize: '14px' }}>
            {isSpeaking ? 'üé§ –ì–æ–≤–æ—Ä–∏—Ç–µ...' : 'üîá –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–µ–Ω'}
          </span>
        </div>
        
        {/* –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞ */}
        <div style={{
          width: '100%',
          height: '8px',
          background: 'rgba(255, 255, 255, 0.1)',
          borderRadius: '4px',
          overflow: 'hidden'
        }}>
          <div style={{
            width: `${audioLevel}%`,
            height: '100%',
            background: `linear-gradient(90deg, #00ff88, ${getAudioLevelColor()})`,
            borderRadius: '4px',
            transition: 'width 0.1s ease'
          }}></div>
        </div>
        
        <div style={{
          display: 'flex',
          justifyContent: 'space-between',
          marginTop: '5px'
        }}>
          <span style={{ color: '#b0b0d0', fontSize: '10px' }}>–¢–∏—Ö–æ</span>
          <span style={{ color: '#b0b0d0', fontSize: '10px' }}>–£—Ä–æ–≤–µ–Ω—å: {Math.round(audioLevel)}%</span>
          <span style={{ color: '#b0b0d0', fontSize: '10px' }}>–ì—Ä–æ–º–∫–æ</span>
        </div>
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
      {error && (
        <div style={{
          background: 'rgba(255, 107, 107, 0.1)',
          border: '1px solid rgba(255, 107, 107, 0.3)',
          color: '#ff6b6b',
          padding: '12px',
          borderRadius: '8px',
          marginBottom: '20px',
          fontSize: '14px'
        }}>
          ‚ö†Ô∏è {error}
        </div>
      )}

      {/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div style={{
        display: 'flex',
        gap: '12px',
        justifyContent: 'center',
        marginBottom: '20px'
      }}>
        <button
          onClick={toggleMute}
          disabled={connectionStatus === 'failed'}
          style={{
            padding: '12px 20px',
            background: isMuted ? '#ff6b6b' : 'var(--primary-blue)',
            color: 'white',
            border: 'none',
            borderRadius: '10px',
            cursor: connectionStatus === 'failed' ? 'not-allowed' : 'pointer',
            display: 'flex',
            alignItems: 'center',
            gap: '8px',
            fontSize: '14px',
            opacity: connectionStatus === 'failed' ? 0.6 : 1,
            transition: 'all 0.3s ease'
          }}
        >
          {isMuted ? 'üîá' : 'üé§'}
          {isMuted ? '–í–∫–ª—é—á–∏—Ç—å' : '–í—ã–∫–ª—é—á–∏—Ç—å'}
        </button>

        <button
          onClick={disconnect}
          style={{
            padding: '12px 20px',
            background: 'rgba(255, 107, 107, 0.2)',
            color: '#ff6b6b',
            border: '1px solid rgba(255, 107, 107, 0.3)',
            borderRadius: '10px',
            cursor: 'pointer',
            display: 'flex',
            alignItems: 'center',
            gap: '8px',
            fontSize: '14px'
          }}
        >
          üìû –ó–∞–≤–µ—Ä—à–∏—Ç—å
        </button>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–µ */}
      <div style={{
        fontSize: '12px',
        color: 'var(--text-secondary)',
        textAlign: 'center',
        padding: '10px',
        background: 'rgba(255, 255, 255, 0.05)',
        borderRadius: '8px'
      }}>
        <div>ID –∫–æ–º–Ω–∞—Ç—ã: <strong>{roomId}</strong></div>
        <div>üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è WebRTC –¥–ª—è –ø—Ä—è–º–æ–≥–æ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</div>
        {connectionStatus === 'ready' && (
          <div style={{ color: '#ffc107', marginTop: '5px' }}>
            ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...
          </div>
        )}
      </div>

      {/* –°–∫—Ä—ã—Ç—ã–µ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç—ã */}
      <audio ref={localAudioRef} muted />
      <audio ref={remoteAudioRef} autoPlay />

      <style jsx>{`
        @keyframes pulse {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.5; }
        }
      `}</style>
    </div>
  );
};

export default VoiceChat;