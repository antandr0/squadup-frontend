import React, { useState, useRef, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import WebRTCManager from '../services/WebRTCManager';
import './VoiceChat.css';

const VoiceChat = () => {
  const { user } = useAuth();
  const [isConnected, setIsConnected] = useState(false);
  const [roomId, setRoomId] = useState('');
  const [participants, setParticipants] = useState([]);
  const [isMuted, setIsMuted] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState('disconnected');
  
  const webRTCManager = useRef(null);
  const audioElements = useRef(new Map());

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebRTCManager
    webRTCManager.current = new WebRTCManager();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    webRTCManager.current.onRemoteStream = (userId, stream) => {
      console.log('üîä Remote stream received for user:', userId);
      // –°–æ–∑–¥–∞–µ–º audio —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
      const audio = new Audio();
      audio.srcObject = stream;
      audio.play().catch(e => console.error('Error playing audio:', e));
      audioElements.current.set(userId, audio);
    };

    return () => {
      // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      if (webRTCManager.current) {
        webRTCManager.current.cleanup();
      }
      audioElements.current.forEach(audio => {
        audio.pause();
        audio.srcObject = null;
      });
      audioElements.current.clear();
    };
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞
  const initializeVoiceChat = async () => {
    try {
      setConnectionStatus('connecting');
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
      await webRTCManager.current.getLocalAudioStream();
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∫–æ–º–Ω–∞—Ç—ã
      const newRoomId = generateRoomId();
      setRoomId(newRoomId);
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ signaling server
      await webRTCManager.current.connectToSignalingServer(
        newRoomId,
        user.id,
        user.nickname,
        {
          onRoomJoined: (users) => {
            console.log('‚úÖ Joined room with users:', users);
            setParticipants(users.map(u => ({
              ...u,
              isYou: u.userId === user.id,
              volume: 100,
              isMuted: false
            })));
            setIsConnected(true);
            setConnectionStatus('connected');
          },
          
          onUserJoined: (newUser) => {
            console.log('üë§ User joined:', newUser);
            setParticipants(prev => {
              if (prev.find(p => p.userId === newUser.userId)) {
                return prev;
              }
              return [...prev, {
                ...newUser,
                isYou: newUser.userId === user.id,
                volume: 100,
                isMuted: false
              }];
            });
          },
          
          onUserLeft: (userId) => {
            console.log('üë§ User left:', userId);
            setParticipants(prev => prev.filter(p => p.userId !== userId));
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º audio —ç–ª–µ–º–µ–Ω—Ç
            const audio = audioElements.current.get(userId);
            if (audio) {
              audio.pause();
              audio.srcObject = null;
              audioElements.current.delete(userId);
            }
          },
          
          onUserMuteUpdated: (userId, isMuted) => {
            console.log(`üîá User ${userId} mute:`, isMuted);
            setParticipants(prev => 
              prev.map(p => 
                p.userId === userId ? { ...p, isMuted } : p
              )
            );
          },
          
          onError: (errorMessage) => {
            console.error('Signaling error:', errorMessage);
            setConnectionStatus('error');
            alert(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${errorMessage}`);
          },
          
          userNickname: user.nickname
        }
      );

    } catch (error) {
      console.error('Error initializing voice chat:', error);
      setConnectionStatus('error');
      
      if (error.name === 'NotAllowedError') {
        alert('–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.');
      } else {
        alert(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞: ${error.message}`);
      }
    }
  };

  const generateRoomId = () => {
    return `room-${Math.random().toString(36).substr(2, 9)}`;
  };

  const disconnectVoiceChat = () => {
    if (webRTCManager.current) {
      webRTCManager.current.leaveRoom();
    }
    
    setIsConnected(false);
    setConnectionStatus('disconnected');
    setParticipants([]);
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ audio —ç–ª–µ–º–µ–Ω—Ç—ã
    audioElements.current.forEach(audio => {
      audio.pause();
      audio.srcObject = null;
    });
    audioElements.current.clear();
  };

  const toggleMute = () => {
    const newMutedState = !isMuted;
    setIsMuted(newMutedState);
    
    if (webRTCManager.current) {
      webRTCManager.current.toggleMute(newMutedState);
    }
  };

  const handleVolumeChange = (userId, volume) => {
    setParticipants(prev => 
      prev.map(p => 
        p.id === userId ? { ...p, volume } : p
      )
    );
    
    // –†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ audio —ç–ª–µ–º–µ–Ω—Ç–∞
    const audio = audioElements.current.get(userId);
    if (audio) {
      audio.volume = volume / 100;
    }
  };

  const copyRoomLink = () => {
    navigator.clipboard.writeText(roomId);
    alert('ID –∫–æ–º–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –¥—Ä—É–∑—å—è–º –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.');
  };

  const invitePlayer = () => {
    const nickname = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:');
    if (nickname) {
      // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –¥—Ä—É–∑–µ–π/–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
      alert(`–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É ${nickname}!`);
    }
  };

  const getConnectionStatusText = () => {
    const statusMap = {
      disconnected: '–û—Ç–∫–ª—é—á–µ–Ω',
      connecting: '–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è...',
      connected: '–ü–æ–¥–∫–ª—é—á–µ–Ω',
      error: '–û—à–∏–±–∫–∞'
    };
    return statusMap[connectionStatus] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  };

  return (
    <div className="voice-chat">
      <div className="voice-chat-header">
        <h3 className="voice-chat-title">üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç</h3>
        <div className="voice-chat-status">
          <div className={`status-indicator ${connectionStatus}`}>
            {getConnectionStatusText()}
          </div>
        </div>
      </div>

      {!isConnected ? (
        <div className="voice-chat-setup">
          <div className="setup-info">
            <h4>–°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É</h4>
            <p>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —Ç–∏–º–º–µ–π—Ç–æ–≤ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ç–∞–∫—Ç–∏–∫–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≤ –∏–≥—Ä–µ</p>
            <div className="feature-highlights">
              <span>üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</span>
              <span>üéØ –ù–∏–∑–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞</span>
              <span>üë• –î–æ 8 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
            </div>
          </div>
          <button 
            className="connect-button"
            onClick={initializeVoiceChat}
            disabled={connectionStatus === 'connecting'}
          >
            {connectionStatus === 'connecting' ? 'üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : 'üéß –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'}
          </button>
        </div>
      ) : (
        <div className="voice-chat-active">
          <div className="room-info">
            <div className="room-id">
              <span>ID –∫–æ–º–Ω–∞—Ç—ã: <strong>{roomId}</strong></span>
              <button 
                className="copy-button"
                onClick={copyRoomLink}
              >
                üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
              </button>
            </div>
            <button 
              className="invite-button"
              onClick={invitePlayer}
            >
              ‚ûï –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏–≥—Ä–æ–∫–∞
            </button>
          </div>

          <div className="participants-list">
            <h4>–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({participants.length})</h4>
            {participants.map(participant => (
              <div key={participant.userId} className="participant-item">
                <div className="participant-info">
                  <div className="participant-avatar">
                    {participant.nickname?.charAt(0).toUpperCase()}
                  </div>
                  <div className="participant-details">
                    <span className="participant-name">
                      {participant.nickname}
                      {participant.isYou && ' (–í—ã)'}
                    </span>
                    <div className="participant-status">
                      {participant.isMuted ? 'üîá –ó–∞–≥–ª—É—à–µ–Ω' : 'üé§ –ì–æ–≤–æ—Ä–∏—Ç'}
                      {participant.isYou && isMuted && ' (–í—ã –∑–∞–≥–ª—É—à–µ–Ω—ã)'}
                    </div>
                  </div>
                </div>
                
                {!participant.isYou && (
                  <div className="participant-controls">
                    <div className="volume-control">
                      <span className="volume-icon">üîä</span>
                      <input
                        type="range"
                        min="0"
                        max="100"
                        value={participant.volume}
                        onChange={(e) => handleVolumeChange(participant.userId, parseInt(e.target.value))}
                        className="volume-slider"
                      />
                      <span className="volume-value">{participant.volume}%</span>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>

          <div className="voice-controls">
            <button 
              className={`mute-button ${isMuted ? 'muted' : ''}`}
              onClick={toggleMute}
            >
              {isMuted ? 'üîá –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : 'üé§ –í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫'}
            </button>
            <button 
              className="disconnect-button"
              onClick={disconnectVoiceChat}
            >
              üìû –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è
            </button>
          </div>
        </div>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö */}
      <div className="voice-features-info">
        <h4>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</h4>
        <ul>
          <li>‚ö° WebRTC - –ø—Ä—è–º–æ–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</li>
          <li>üîí –°–∫–≤–æ–∑–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ</li>
          <li>üéØ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–Ω–µ–µ 100–º—Å</li>
          <li>üåê –†–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ</li>
        </ul>
      </div>
    </div>
  );
};

export default VoiceChat;
